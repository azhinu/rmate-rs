version: 2.1

jobs:
  linux:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.42.0
      build_type:
        type: string
        default: "debug"
      image:
        type: string
        default: "hamiid/circleci-rust:latest"
    docker:
      # - image: circleci/rust:stretch
      - image: "<< parameters.image >>"
    environment:
      TARGET: "<< parameters.target >>"
      BUILD_TYPE: "<< parameters.build_type >>"
      RUST_BACKTRACE: "1"
      CIRCLE_OS_NAME: linux
      CIRCLE_TEST: "false"
    steps:
      # - run:
      #     name: Install Dependencies
      #     command: |
      #         # sh -c 'echo "deb http://deb.debian.org/debian stretch-backports main" > /etc/apt/sources.list.d/backports.list'
      #         apt-get update
      #         apt-get clean
      #         apt-get install curl git bash build-essential make binutils -y
      #         rm -r /var/lib/apt/lists/*
      # - run:
      #     name: Install Rust "<< parameters.rust >>"
      #     command:
      #       curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
      - run:
          name: Add Rust Components
          command: |
            rustup component add clippy rustfmt
            rustup target add $TARGET
            rustc --version; cargo --version; rustup --version
      - checkout
      - run:
          name: Build
          command: |
            cargo generate-lockfile
            .circleci/script.sh
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
  tests:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.42.0
      image:
        type: string
        default: hamiid/circleci-rust:latest
    docker:
      # - image: circleci/rust:stretch
      - image: "<< parameters.image >>"
    environment:
      RUST_BACKTRACE: "1"
      TARGET: "<< parameters.target >>"
      CIRCLE_TEST: "true" # change to false to disable tests
      PROJECT_BUILD_WORKSPACE: /tmp/apr
      CIRCLE_OS_NAME: linux
    steps:
      # - checkout
      - attach_workspace:
         at: /tmp/rmate
      - run:
          name: Attched?
          command: |
            ls /tmp/rmate/project
      - run:
          name: Run Tests
          command: |
            cd /tmp/rmate/project
            export EXEC=target/$TARGET/debug/rmate
            export working_dir=$(pwd)
            .circleci/script.sh $EXEC $working_dir

  deploy:
    description: Deploy to Github from a linux container
    parameters:
      target:
        type: string
    docker:
      - image: circleci/rust:stretch
    environment:
      TARGET: "<< parameters.target >>"
      CIRCLECI_TEST: "false"
      CIRCLE_OS_NAME: linux
      GHRELEASER_VERSION: v0.13.0
    steps:
      - attach_workspace:
          at: /tmp/rmate
      - run:
          name: Deploy using ghr
          command: |
            cd /tmp/rmate/project
            export VERSION=${CIRCLE_TAG}
            .circleci/before_deploy.sh
            .circleci/deploy.sh

  macosimage:
    parameters:
      release:
        type: boolean
        default: false
      rust:
        type: string
        default: 1.42.0
    macos:
      xcode: "10.0"
    environment:
      RUST_BACKTRACE: "1"
      TARGET: x86_64-apple-darwin
      CIRCLE_OS_NAME: macos
      GHRELEASER_VERSION: v0.13.0
    steps:
      - run:
          name: Install Rust
          command: |
            sudo mkdir /opt
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
            sudo ln -s ~/.cargo/bin/* /usr/local/bin
      - run:
          name: Rust Version
          command: rustc --version; cargo --version; rustup --version
      - unless:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Build Debug
                command: |
                  .circleci/script.sh
            - run:
                name: Running macOS Tests
                command: |
                    export CIRCLE_TEST=true
                    export APR_EXEC=./target/$TARGET/debug/rmate
                    export working_dir=$(pwd)
                    .circleci/script.sh $APR_EXEC $working_dir
      - when:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Building Release
                command: |
                    export BUILD_TYPE=release
                    .circleci/script.sh
            - run:
                name: Building Artifact
                command: .circleci/before_deploy.sh
            - run:
                name: Deploying to Github
                command: |
                  export CIRCLE_TEST=false
                  export VERSION=${CIRCLE_TAG}
                  .circleci/deploy.sh

workflows:
  linux_arm:
    jobs:
      - linux:
          name: armv7-hf-release
          target: armv7-unknown-linux-gnueabihf
          build_type: release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      - deploy:
          name: armv7-deploy
          target: armv7-unknown-linux-gnueabihf
          requires:
            - armv7-hf-release
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/

  
  linux_x86_64:
      jobs:
        - linux:
            name: Linux-64bit
            target: x86_64-unknown-linux-gnu
            rust: 1.42.0
            filters:
              branches:
                only: /.*/
              tags:
                ignore: /v?[0-9]+.*/
        - tests:
            name: Linux-64bit-test
            target: x86_64-unknown-linux-gnu
            rust: 1.42.0
            filters:
              branches:
                only: [master, develop]
              tags:
                ignore: /v?[0-9]+.*/
            requires:
              - Linux-64bit
        - linux:
            name: Linux-64bit-release
            target: x86_64-unknown-linux-gnu
            # target: i686-unknown-linux-gnu
            rust: 1.42.0
            build_type: release
            filters:
              tags:
                only: /v?[0-9]+.*/
              branches:
                ignore: /.*/
        - deploy:
            name: deploy-linux_x86_64
            target: x86_64-unknown-linux-gnu
            filters:
              tags:
                only: /v?[0-9]+.*/
              branches:
                ignore: /.*/
            requires:
              - Linux-64bit-release

  # build-n-test-macos:
  #   jobs:
  #     - macosimage:
  #         name: macOS-64bit
  #         rust: 1.42.0
  #         filters:
  #           branches:
  #             only: [master, develop]

  # deploy-to-github:
  #   jobs:
  #     - macosimage:
  #         name: macOS-64bit-release
  #         rust: 1.42.0
  #         release: true
  #         filters:
  #           tags:
  #             only: /v?[0-9]+.*/
  #           branches:
  #             ignore: /.*/

      # - deploy:
      #     name: Deploy to Github
      #     release: true
      #     requires:
      #       - macOS-64bit-release
      #     filters:
      #       tags:
      #         only: /v?[0-9]+.*/
      #       branches:
      #         ignore: /.*/

