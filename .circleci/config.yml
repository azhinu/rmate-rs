version: 2.1

jobs:
  linux:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.42.0
    docker:
      - image: circleci/rust:stretch
    environment:
      RUST_BACKTRACE: "1"
      CIRCLE_OS_NAME: linux
      TARGET: "<< parameters.target >>"
    steps:
      - run:
          name: Install Dependencies
          command: |
              sudo sh -c 'echo "deb http://deb.debian.org/debian stretch-backports main" > /etc/apt/sources.list.d/backports.list'
              sudo apt-get update
              sudo apt-get clean
              sudo rm -r /var/lib/apt/lists/*
      - run:
          name: Install Rust "<< parameters.rust >>"
          command:
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
      - run:
          name: Add Rust Components
          command: |
            rustup component add clippy rustfmt
            rustc --version; cargo --version; rustup --version
      - checkout
      - run:
          name: Build
          command: |
            cargo generate-lockfile
            .circleci/script.sh
      - run:
          name: Run clippy & rustfmt
          command: |
            cargo fmt
            cargo clippy --all-targets --all-features -- -D warnings
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project
  tests:
    parameters:
      target:
        type: string
      rust:
        type: string
        default: 1.42.0
    docker:
      - image: circleci/rust:stretch
    environment:
      RUST_BACKTRACE: "1"
      TARGET: "<< parameters.target >>"
      CIRCLE_TEST: "true" # change to false to disable tests
      PROJECT_BUILD_WORKSPACE: /tmp/apr
      CIRCLE_OS_NAME: linux
    steps:
      # - checkout
      - attach_workspace:
         at: /tmp/apr
      - run:
          name: Attched?
          command: |
            echo $(pwd)
            ls /tmp/apr/*
            ls /tmp/apr/project || true
      - run:
          name: Run Tests
          command: |
            cd /tmp/apr/project
            export APR_EXEC=/tmp/apr/project/target/$TARGET/debug/alfred-pinboard-rs
            export working_dir=$(pwd)
            .circleci/script.sh $APR_EXEC $working_dir
  deploy:
    description: Deploy to Github from a linux container (not used in any workflows at the moment)
    docker:
      - image: circleci/golang:1.13
    environment:
      TARGET: x86_64-unknown-linux-gnu
      CIRCLECI_TEST: "false"
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run:
          command: |
            go get github.com/tcnksm/ghr
            export VERSION=${CIRCLE_TAG}
            [ -n ${GITHUB_TOKEN} ] && echo "I have it!"
            [ -z ${GITHUB_TOKEN} ] && echo "I DO NOT have it!"
            [ -f /tmp/target/alfred-pinboard-rust-${CIRCLE_TAG}.alfredworkflow ]
            export artifacts=/tmp/target/alfred-pinboard-rust-${CIRCLE_TAG}.alfredworkflow
            echo ${CIRCLE_PROJECT_USERNAME} ${CIRCLE_PROJECT_REPONAME} ${CIRCLE_SHA1} ${VERSION} ${artifacts}
            ghr -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ${artifacts}

  macosimage:
    parameters:
      release:
        type: boolean
        default: false
      rust:
        type: string
        default: 1.42.0
    macos:
      xcode: "10.0"
    environment:
      RUST_BACKTRACE: "1"
      TARGET: x86_64-apple-darwin
      CIRCLE_OS_NAME: macos
      GHRELEASER_VERSION: v0.13.0
    steps:
      - run:
          name: Install Rust
          command: |
            sudo mkdir /opt
            curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain << parameters.rust >>
            sudo ln -s ~/.cargo/bin/* /usr/local/bin
      - run:
          name: Rust Version
          command: rustc --version; cargo --version; rustup --version
      - unless:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Build Debug
                command: |
                  .circleci/script.sh
            - run:
                name: Running macOS Tests
                command: |
                    export CIRCLE_TEST=true
                    export APR_EXEC=./target/$TARGET/debug/alfred-pinboard-rs
                    export working_dir=$(pwd)
                    .circleci/script.sh $APR_EXEC $working_dir
      - when:
          condition: << parameters.release >>
          steps:
            - checkout
            - run:
                name: Building Release
                command: |
                    export BUILD_TYPE=release
                    .circleci/script.sh
            - run:
                name: Building Alfred Workflow Bundle
                command: .circleci/before_deploy.sh
            - run:
                name: Deploying to Github
                command: |
                  export CIRCLE_TEST=false
                  export VERSION=${CIRCLE_TAG}
                  .circleci/deploy.sh

workflows:
  linux_x86_64:
      jobs:
        - linux:
            name: Linux-64bit
            target: x86_64-unknown-linux-gnu
            rust: 1.42.0
            filters:
              branches:
                only: /.*/
              tags:
                ignore: /v?[0-9]+.*/
        - tests:
            name: Linux-64bit-test
            target: x86_64-unknown-linux-gnu
            rust: 1.42.0
            filters:
              branches:
                only: [master, develop]
              tags:
                ignore: /v?[0-9]+.*/
            requires:
              - Linux-64bit

  # build-n-test-macos:
  #   jobs:
  #     - macosimage:
  #         name: macOS-64bit
  #         rust: 1.42.0
  #         filters:
  #           branches:
  #             only: [master, develop]
  deploy-to-github:
    jobs:
      - macosimage:
          name: macOS-64bit-release
          rust: 1.42.0
          release: true
          filters:
            tags:
              only: /v?[0-9]+.*/
            branches:
              ignore: /.*/
      # - deploy:
      #     name: Deploy to Github
      #     release: true
      #     requires:
      #       - macOS-64bit-release
      #     filters:
      #       tags:
      #         only: /v?[0-9]+.*/
      #       branches:
      #         ignore: /.*/

